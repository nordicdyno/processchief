syntax = "proto3";

package pb;

import "google/api/annotations.proto";

// ControlAPI controls processes chief.
service ControlAPI {
    // LoggerSignal send signal to logger.
    rpc LoggerSignal (Signal) returns (Result) {
        option (google.api.http) = {
			post: "/logger/signal"
			body: "*"
		};
    }

    // CommandSignal send signal to process.
    rpc ProcessSignal (Signal) returns (Result) {
        option (google.api.http) = {
			post: "/proc/signal"
			body: "*"
		};
    }

    // AllProcesses returns all registered processes.
    rpc AllProcesses (Nope) returns (ProcessesStatus) {
        option (google.api.http) = {
			post: "/procs"
			body: "*"
		};
    }

    // Halt stops supervisor.
    rpc Halt (Nope) returns (Result) {
        option (google.api.http) = {
			post: "/halt"
			body: "*"
		};
    }

    // AddProcess adds process.
    rpc AddProcess (SetProc) returns (ProcStatus) {
        option (google.api.http) = {
			post: "/proc/add"
			body: "*"
		};
    }

    // UpdateProcess updates process.
    rpc UpdateProcess (SetProc) returns (ProcStatus) {
        option (google.api.http) = {
			post: "/proc/update"
			body: "*"
		};
    }

    // DeleteProcess deletes process.
    rpc DeleteProcess (ProcName) returns (Result) {
        option (google.api.http) = {
			post: "/proc/delete"
			body: "*"
		};
    }

    // GetProcess returns process status by name.
    rpc GetProcess (ProcName) returns (ProcStatus) {
        option (google.api.http) = {
			post: "/proc/get"
			body: "*"
		};
    }
}

message Nope {}

message Result {
    string description = 1;
}

message Signal {
    string name = 1;
    int32 signal = 2;
}

message SetProc {
    bool create = 1;
    Process process = 2;
}

message ProcStatus {
    int32 pid = 1;
    string state = 2;
    Process process = 3;
    bool exited = 4;
}


message Process {
    string name = 1;
    string commandLine = 2;
    string loggerCommandLine = 3;
    string workingDir = 4;
}

message ProcName {
    string name = 1;
}

// ProcessesStatus contains processes statuses.
message ProcessesStatus {
    repeated ProcStatus statuses = 1;
}
