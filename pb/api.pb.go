// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/api.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Nope struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nope) Reset()         { *m = Nope{} }
func (m *Nope) String() string { return proto.CompactTextString(m) }
func (*Nope) ProtoMessage()    {}
func (*Nope) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{0}
}

func (m *Nope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nope.Unmarshal(m, b)
}
func (m *Nope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nope.Marshal(b, m, deterministic)
}
func (m *Nope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nope.Merge(m, src)
}
func (m *Nope) XXX_Size() int {
	return xxx_messageInfo_Nope.Size(m)
}
func (m *Nope) XXX_DiscardUnknown() {
	xxx_messageInfo_Nope.DiscardUnknown(m)
}

var xxx_messageInfo_Nope proto.InternalMessageInfo

type NewService struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Commandline          string   `protobuf:"bytes,2,opt,name=commandline,proto3" json:"commandline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewService) Reset()         { *m = NewService{} }
func (m *NewService) String() string { return proto.CompactTextString(m) }
func (*NewService) ProtoMessage()    {}
func (*NewService) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{1}
}

func (m *NewService) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewService.Unmarshal(m, b)
}
func (m *NewService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewService.Marshal(b, m, deterministic)
}
func (m *NewService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewService.Merge(m, src)
}
func (m *NewService) XXX_Size() int {
	return xxx_messageInfo_NewService.Size(m)
}
func (m *NewService) XXX_DiscardUnknown() {
	xxx_messageInfo_NewService.DiscardUnknown(m)
}

var xxx_messageInfo_NewService proto.InternalMessageInfo

func (m *NewService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewService) GetCommandline() string {
	if m != nil {
		return m.Commandline
	}
	return ""
}

type Service struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Commandline          string   `protobuf:"bytes,2,opt,name=commandline,proto3" json:"commandline,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Pid                  int32    `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{2}
}

func (m *Service) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Service.Unmarshal(m, b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Service.Marshal(b, m, deterministic)
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return xxx_messageInfo_Service.Size(m)
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetCommandline() string {
	if m != nil {
		return m.Commandline
	}
	return ""
}

func (m *Service) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Service) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

type ServiceName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServiceName) Reset()         { *m = ServiceName{} }
func (m *ServiceName) String() string { return proto.CompactTextString(m) }
func (*ServiceName) ProtoMessage()    {}
func (*ServiceName) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{3}
}

func (m *ServiceName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ServiceName.Unmarshal(m, b)
}
func (m *ServiceName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ServiceName.Marshal(b, m, deterministic)
}
func (m *ServiceName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceName.Merge(m, src)
}
func (m *ServiceName) XXX_Size() int {
	return xxx_messageInfo_ServiceName.Size(m)
}
func (m *ServiceName) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceName.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceName proto.InternalMessageInfo

func (m *ServiceName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Services contains service names.
type Services struct {
	Service              []*Service `protobuf:"bytes,1,rep,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Services) Reset()         { *m = Services{} }
func (m *Services) String() string { return proto.CompactTextString(m) }
func (*Services) ProtoMessage()    {}
func (*Services) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{4}
}

func (m *Services) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Services.Unmarshal(m, b)
}
func (m *Services) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Services.Marshal(b, m, deterministic)
}
func (m *Services) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Services.Merge(m, src)
}
func (m *Services) XXX_Size() int {
	return xxx_messageInfo_Services.Size(m)
}
func (m *Services) XXX_DiscardUnknown() {
	xxx_messageInfo_Services.DiscardUnknown(m)
}

var xxx_messageInfo_Services proto.InternalMessageInfo

func (m *Services) GetService() []*Service {
	if m != nil {
		return m.Service
	}
	return nil
}

func init() {
	proto.RegisterType((*Nope)(nil), "pb.Nope")
	proto.RegisterType((*NewService)(nil), "pb.NewService")
	proto.RegisterType((*Service)(nil), "pb.Service")
	proto.RegisterType((*ServiceName)(nil), "pb.ServiceName")
	proto.RegisterType((*Services)(nil), "pb.Services")
}

func init() { proto.RegisterFile("pb/api.proto", fileDescriptor_b0bcca62df7aeb4c) }

var fileDescriptor_b0bcca62df7aeb4c = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x4a, 0x03, 0x31,
	0x14, 0xc6, 0x49, 0x3b, 0xf6, 0xcf, 0x9b, 0x6a, 0x25, 0x0b, 0x19, 0x06, 0x17, 0x63, 0x40, 0x28,
	0x5d, 0x74, 0xb0, 0x82, 0x42, 0xc5, 0x45, 0xdd, 0x88, 0x9b, 0x22, 0x15, 0x0f, 0x90, 0x69, 0x42,
	0x09, 0xa4, 0x49, 0x68, 0x52, 0xdd, 0x7b, 0x05, 0x8f, 0xe6, 0x15, 0x3c, 0x85, 0x2b, 0x49, 0x3a,
	0xad, 0x59, 0x08, 0x2e, 0xdc, 0xbd, 0xe4, 0xfb, 0x7e, 0xef, 0xcb, 0x7b, 0x04, 0x7a, 0xa6, 0x2a,
	0xa9, 0x11, 0x23, 0xb3, 0xd6, 0x4e, 0xe3, 0x86, 0xa9, 0xf2, 0xd3, 0xa5, 0xd6, 0x4b, 0xc9, 0xfd,
	0x6d, 0x49, 0x95, 0xd2, 0x8e, 0x3a, 0xa1, 0x95, 0xdd, 0x3a, 0x48, 0x0b, 0x92, 0x99, 0x36, 0x9c,
	0xdc, 0x01, 0xcc, 0xf8, 0xeb, 0x13, 0x5f, 0xbf, 0x88, 0x05, 0xc7, 0x18, 0x12, 0x45, 0x57, 0x3c,
	0x43, 0x05, 0x1a, 0x74, 0xe7, 0xa1, 0xc6, 0x05, 0xa4, 0x0b, 0xbd, 0x5a, 0x51, 0xc5, 0xa4, 0x50,
	0x3c, 0x6b, 0x04, 0x29, 0xbe, 0x22, 0x02, 0xda, 0xff, 0x6a, 0x80, 0x4f, 0xa0, 0x65, 0x1d, 0x75,
	0x1b, 0x9b, 0x35, 0x83, 0x58, 0x9f, 0xf0, 0x31, 0x34, 0x8d, 0x60, 0x59, 0x52, 0xa0, 0xc1, 0xc1,
	0xdc, 0x97, 0xe4, 0x0c, 0xd2, 0x3a, 0x6a, 0xe6, 0x5b, 0xff, 0x12, 0x47, 0x2e, 0xa0, 0x53, 0x5b,
	0x2c, 0x3e, 0x87, 0xb6, 0xdd, 0xd6, 0x19, 0x2a, 0x9a, 0x83, 0x74, 0x9c, 0x8e, 0x4c, 0x35, 0xaa,
	0xe5, 0xf9, 0x4e, 0x1b, 0x7f, 0xa1, 0x7d, 0x5b, 0x3b, 0x7d, 0x7c, 0xc0, 0xd7, 0x00, 0x53, 0xc6,
	0x76, 0x33, 0x1d, 0x79, 0xe6, 0x67, 0x49, 0x79, 0x27, 0x9c, 0xfd, 0xf2, 0xfa, 0x6f, 0x1f, 0x9f,
	0xef, 0x8d, 0x2e, 0x49, 0x4a, 0xca, 0xd8, 0x04, 0x0d, 0xf1, 0x2d, 0x1c, 0x3e, 0x1b, 0x46, 0x1d,
	0xff, 0x9b, 0xc5, 0x81, 0xed, 0x91, 0x76, 0xb9, 0x09, 0x84, 0xc7, 0xaf, 0x20, 0x9d, 0x4a, 0xb9,
	0x7f, 0xfd, 0xde, 0x9c, 0xf7, 0xa2, 0x67, 0xdb, 0x38, 0x56, 0x4a, 0xcf, 0xdd, 0x00, 0xdc, 0x73,
	0xb7, 0xcb, 0xec, 0x47, 0x66, 0xbf, 0xa5, 0x3c, 0x1e, 0x3a, 0x82, 0x97, 0xdc, 0x4d, 0xd0, 0xb0,
	0x6a, 0x85, 0x0f, 0x71, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x33, 0x78, 0x4d, 0x1e, 0x42, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ServicesAPIClient is the client API for ServicesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServicesAPIClient interface {
	// AddService adds service.
	AddService(ctx context.Context, in *NewService, opts ...grpc.CallOption) (*Nope, error)
	// UpdateService updates service.
	UpdateService(ctx context.Context, in *NewService, opts ...grpc.CallOption) (*Nope, error)
	// AllServices returns all registered services.
	AllServices(ctx context.Context, in *Nope, opts ...grpc.CallOption) (*Services, error)
	// GetService returns service description for provided name.
	GetService(ctx context.Context, in *ServiceName, opts ...grpc.CallOption) (*Service, error)
}

type servicesAPIClient struct {
	cc *grpc.ClientConn
}

func NewServicesAPIClient(cc *grpc.ClientConn) ServicesAPIClient {
	return &servicesAPIClient{cc}
}

func (c *servicesAPIClient) AddService(ctx context.Context, in *NewService, opts ...grpc.CallOption) (*Nope, error) {
	out := new(Nope)
	err := c.cc.Invoke(ctx, "/pb.ServicesAPI/AddService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) UpdateService(ctx context.Context, in *NewService, opts ...grpc.CallOption) (*Nope, error) {
	out := new(Nope)
	err := c.cc.Invoke(ctx, "/pb.ServicesAPI/UpdateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) AllServices(ctx context.Context, in *Nope, opts ...grpc.CallOption) (*Services, error) {
	out := new(Services)
	err := c.cc.Invoke(ctx, "/pb.ServicesAPI/AllServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetService(ctx context.Context, in *ServiceName, opts ...grpc.CallOption) (*Service, error) {
	out := new(Service)
	err := c.cc.Invoke(ctx, "/pb.ServicesAPI/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesAPIServer is the server API for ServicesAPI service.
type ServicesAPIServer interface {
	// AddService adds service.
	AddService(context.Context, *NewService) (*Nope, error)
	// UpdateService updates service.
	UpdateService(context.Context, *NewService) (*Nope, error)
	// AllServices returns all registered services.
	AllServices(context.Context, *Nope) (*Services, error)
	// GetService returns service description for provided name.
	GetService(context.Context, *ServiceName) (*Service, error)
}

// UnimplementedServicesAPIServer can be embedded to have forward compatible implementations.
type UnimplementedServicesAPIServer struct {
}

func (*UnimplementedServicesAPIServer) AddService(ctx context.Context, req *NewService) (*Nope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddService not implemented")
}
func (*UnimplementedServicesAPIServer) UpdateService(ctx context.Context, req *NewService) (*Nope, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateService not implemented")
}
func (*UnimplementedServicesAPIServer) AllServices(ctx context.Context, req *Nope) (*Services, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllServices not implemented")
}
func (*UnimplementedServicesAPIServer) GetService(ctx context.Context, req *ServiceName) (*Service, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}

func RegisterServicesAPIServer(s *grpc.Server, srv ServicesAPIServer) {
	s.RegisterService(&_ServicesAPI_serviceDesc, srv)
}

func _ServicesAPI_AddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).AddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServicesAPI/AddService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).AddService(ctx, req.(*NewService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_UpdateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).UpdateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServicesAPI/UpdateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).UpdateService(ctx, req.(*NewService))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_AllServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).AllServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServicesAPI/AllServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).AllServices(ctx, req.(*Nope))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServicesAPI/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetService(ctx, req.(*ServiceName))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServicesAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServicesAPI",
	HandlerType: (*ServicesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddService",
			Handler:    _ServicesAPI_AddService_Handler,
		},
		{
			MethodName: "UpdateService",
			Handler:    _ServicesAPI_UpdateService_Handler,
		},
		{
			MethodName: "AllServices",
			Handler:    _ServicesAPI_AllServices_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _ServicesAPI_GetService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/api.proto",
}
