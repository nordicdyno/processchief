// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/api.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Nope struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Nope) Reset()         { *m = Nope{} }
func (m *Nope) String() string { return proto.CompactTextString(m) }
func (*Nope) ProtoMessage()    {}
func (*Nope) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{0}
}

func (m *Nope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Nope.Unmarshal(m, b)
}
func (m *Nope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Nope.Marshal(b, m, deterministic)
}
func (m *Nope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Nope.Merge(m, src)
}
func (m *Nope) XXX_Size() int {
	return xxx_messageInfo_Nope.Size(m)
}
func (m *Nope) XXX_DiscardUnknown() {
	xxx_messageInfo_Nope.DiscardUnknown(m)
}

var xxx_messageInfo_Nope proto.InternalMessageInfo

type Result struct {
	Description          string   `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{1}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Signal struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Signal               int32    `protobuf:"varint,2,opt,name=signal,proto3" json:"signal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signal) Reset()         { *m = Signal{} }
func (m *Signal) String() string { return proto.CompactTextString(m) }
func (*Signal) ProtoMessage()    {}
func (*Signal) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{2}
}

func (m *Signal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signal.Unmarshal(m, b)
}
func (m *Signal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signal.Marshal(b, m, deterministic)
}
func (m *Signal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signal.Merge(m, src)
}
func (m *Signal) XXX_Size() int {
	return xxx_messageInfo_Signal.Size(m)
}
func (m *Signal) XXX_DiscardUnknown() {
	xxx_messageInfo_Signal.DiscardUnknown(m)
}

var xxx_messageInfo_Signal proto.InternalMessageInfo

func (m *Signal) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Signal) GetSignal() int32 {
	if m != nil {
		return m.Signal
	}
	return 0
}

type ProcEnv struct {
	EnvVars              []string `protobuf:"bytes,1,rep,name=envVars,proto3" json:"envVars,omitempty"`
	WorkingDir           string   `protobuf:"bytes,2,opt,name=workingDir,proto3" json:"workingDir,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcEnv) Reset()         { *m = ProcEnv{} }
func (m *ProcEnv) String() string { return proto.CompactTextString(m) }
func (*ProcEnv) ProtoMessage()    {}
func (*ProcEnv) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{3}
}

func (m *ProcEnv) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcEnv.Unmarshal(m, b)
}
func (m *ProcEnv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcEnv.Marshal(b, m, deterministic)
}
func (m *ProcEnv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcEnv.Merge(m, src)
}
func (m *ProcEnv) XXX_Size() int {
	return xxx_messageInfo_ProcEnv.Size(m)
}
func (m *ProcEnv) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcEnv.DiscardUnknown(m)
}

var xxx_messageInfo_ProcEnv proto.InternalMessageInfo

func (m *ProcEnv) GetEnvVars() []string {
	if m != nil {
		return m.EnvVars
	}
	return nil
}

func (m *ProcEnv) GetWorkingDir() string {
	if m != nil {
		return m.WorkingDir
	}
	return ""
}

type SetProc struct {
	Create               bool     `protobuf:"varint,1,opt,name=create,proto3" json:"create,omitempty"`
	Process              *Process `protobuf:"bytes,2,opt,name=process,proto3" json:"process,omitempty"`
	Env                  *ProcEnv `protobuf:"bytes,3,opt,name=env,proto3" json:"env,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetProc) Reset()         { *m = SetProc{} }
func (m *SetProc) String() string { return proto.CompactTextString(m) }
func (*SetProc) ProtoMessage()    {}
func (*SetProc) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{4}
}

func (m *SetProc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetProc.Unmarshal(m, b)
}
func (m *SetProc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetProc.Marshal(b, m, deterministic)
}
func (m *SetProc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetProc.Merge(m, src)
}
func (m *SetProc) XXX_Size() int {
	return xxx_messageInfo_SetProc.Size(m)
}
func (m *SetProc) XXX_DiscardUnknown() {
	xxx_messageInfo_SetProc.DiscardUnknown(m)
}

var xxx_messageInfo_SetProc proto.InternalMessageInfo

func (m *SetProc) GetCreate() bool {
	if m != nil {
		return m.Create
	}
	return false
}

func (m *SetProc) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *SetProc) GetEnv() *ProcEnv {
	if m != nil {
		return m.Env
	}
	return nil
}

type ProcStatus struct {
	Pid                  int32    `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	State                string   `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Process              *Process `protobuf:"bytes,3,opt,name=process,proto3" json:"process,omitempty"`
	Exited               bool     `protobuf:"varint,4,opt,name=exited,proto3" json:"exited,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcStatus) Reset()         { *m = ProcStatus{} }
func (m *ProcStatus) String() string { return proto.CompactTextString(m) }
func (*ProcStatus) ProtoMessage()    {}
func (*ProcStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{5}
}

func (m *ProcStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcStatus.Unmarshal(m, b)
}
func (m *ProcStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcStatus.Marshal(b, m, deterministic)
}
func (m *ProcStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcStatus.Merge(m, src)
}
func (m *ProcStatus) XXX_Size() int {
	return xxx_messageInfo_ProcStatus.Size(m)
}
func (m *ProcStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ProcStatus proto.InternalMessageInfo

func (m *ProcStatus) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ProcStatus) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *ProcStatus) GetProcess() *Process {
	if m != nil {
		return m.Process
	}
	return nil
}

func (m *ProcStatus) GetExited() bool {
	if m != nil {
		return m.Exited
	}
	return false
}

type Process struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CommandLine          string   `protobuf:"bytes,2,opt,name=commandLine,proto3" json:"commandLine,omitempty"`
	LoggerCommandLine    string   `protobuf:"bytes,3,opt,name=loggerCommandLine,proto3" json:"loggerCommandLine,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Process) Reset()         { *m = Process{} }
func (m *Process) String() string { return proto.CompactTextString(m) }
func (*Process) ProtoMessage()    {}
func (*Process) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{6}
}

func (m *Process) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Process.Unmarshal(m, b)
}
func (m *Process) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Process.Marshal(b, m, deterministic)
}
func (m *Process) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Process.Merge(m, src)
}
func (m *Process) XXX_Size() int {
	return xxx_messageInfo_Process.Size(m)
}
func (m *Process) XXX_DiscardUnknown() {
	xxx_messageInfo_Process.DiscardUnknown(m)
}

var xxx_messageInfo_Process proto.InternalMessageInfo

func (m *Process) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Process) GetCommandLine() string {
	if m != nil {
		return m.CommandLine
	}
	return ""
}

func (m *Process) GetLoggerCommandLine() string {
	if m != nil {
		return m.LoggerCommandLine
	}
	return ""
}

type ProcName struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProcName) Reset()         { *m = ProcName{} }
func (m *ProcName) String() string { return proto.CompactTextString(m) }
func (*ProcName) ProtoMessage()    {}
func (*ProcName) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{7}
}

func (m *ProcName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcName.Unmarshal(m, b)
}
func (m *ProcName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcName.Marshal(b, m, deterministic)
}
func (m *ProcName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcName.Merge(m, src)
}
func (m *ProcName) XXX_Size() int {
	return xxx_messageInfo_ProcName.Size(m)
}
func (m *ProcName) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcName.DiscardUnknown(m)
}

var xxx_messageInfo_ProcName proto.InternalMessageInfo

func (m *ProcName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// ProcessesStatus contains processes statuses.
type ProcessesStatus struct {
	Statuses             []*ProcStatus `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ProcessesStatus) Reset()         { *m = ProcessesStatus{} }
func (m *ProcessesStatus) String() string { return proto.CompactTextString(m) }
func (*ProcessesStatus) ProtoMessage()    {}
func (*ProcessesStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_b0bcca62df7aeb4c, []int{8}
}

func (m *ProcessesStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProcessesStatus.Unmarshal(m, b)
}
func (m *ProcessesStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProcessesStatus.Marshal(b, m, deterministic)
}
func (m *ProcessesStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessesStatus.Merge(m, src)
}
func (m *ProcessesStatus) XXX_Size() int {
	return xxx_messageInfo_ProcessesStatus.Size(m)
}
func (m *ProcessesStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessesStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessesStatus proto.InternalMessageInfo

func (m *ProcessesStatus) GetStatuses() []*ProcStatus {
	if m != nil {
		return m.Statuses
	}
	return nil
}

func init() {
	proto.RegisterType((*Nope)(nil), "pb.Nope")
	proto.RegisterType((*Result)(nil), "pb.Result")
	proto.RegisterType((*Signal)(nil), "pb.Signal")
	proto.RegisterType((*ProcEnv)(nil), "pb.ProcEnv")
	proto.RegisterType((*SetProc)(nil), "pb.SetProc")
	proto.RegisterType((*ProcStatus)(nil), "pb.ProcStatus")
	proto.RegisterType((*Process)(nil), "pb.Process")
	proto.RegisterType((*ProcName)(nil), "pb.ProcName")
	proto.RegisterType((*ProcessesStatus)(nil), "pb.ProcessesStatus")
}

func init() { proto.RegisterFile("pb/api.proto", fileDescriptor_b0bcca62df7aeb4c) }

var fileDescriptor_b0bcca62df7aeb4c = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x6d, 0x8b, 0xd3, 0x4e,
	0x10, 0xa7, 0x4d, 0x9b, 0xb6, 0x93, 0xb6, 0xff, 0xeb, 0xde, 0x71, 0xff, 0x58, 0xf4, 0x28, 0x0b,
	0x42, 0x29, 0xd2, 0x40, 0xf5, 0x95, 0x20, 0x5a, 0x7b, 0x45, 0x85, 0xe3, 0x28, 0x29, 0xfa, 0x7e,
	0xdb, 0x2c, 0x31, 0x98, 0xee, 0x86, 0xec, 0xb6, 0xfa, 0xda, 0x6f, 0x20, 0x7e, 0x34, 0xbf, 0x82,
	0x1f, 0x44, 0x66, 0x37, 0x39, 0x73, 0x0f, 0xdc, 0xf9, 0x6e, 0x67, 0xf6, 0xf7, 0x30, 0x33, 0x3b,
	0x09, 0x74, 0xb3, 0x4d, 0xc0, 0xb2, 0x64, 0x9a, 0xe5, 0x52, 0x4b, 0x52, 0xcf, 0x36, 0xc3, 0xc7,
	0xb1, 0x94, 0x71, 0xca, 0x31, 0x1b, 0x30, 0x21, 0xa4, 0x66, 0x3a, 0x91, 0x42, 0x59, 0x04, 0x75,
	0xa1, 0x71, 0x29, 0x33, 0x4e, 0x27, 0xe0, 0x86, 0x5c, 0xed, 0x53, 0x4d, 0x46, 0xe0, 0x45, 0x5c,
	0x6d, 0xf3, 0x24, 0x43, 0x9c, 0x5f, 0x1b, 0xd5, 0xc6, 0x9d, 0xb0, 0x9a, 0xa2, 0x2f, 0xc0, 0x5d,
	0x27, 0xb1, 0x60, 0x29, 0x21, 0xd0, 0x10, 0x6c, 0xc7, 0x0b, 0x90, 0x39, 0x93, 0x53, 0x70, 0x95,
	0xb9, 0xf5, 0xeb, 0xa3, 0xda, 0xb8, 0x19, 0x16, 0x11, 0x5d, 0x40, 0x6b, 0x95, 0xcb, 0xed, 0x52,
	0x1c, 0x88, 0x0f, 0x2d, 0x2e, 0x0e, 0x9f, 0x58, 0xae, 0xfc, 0xda, 0xc8, 0x19, 0x77, 0xc2, 0x32,
	0x24, 0x67, 0x00, 0x5f, 0x65, 0xfe, 0x25, 0x11, 0xf1, 0x79, 0x92, 0x1b, 0x81, 0x4e, 0x58, 0xc9,
	0xd0, 0x18, 0x5a, 0x6b, 0xae, 0x51, 0x07, 0x7d, 0xb6, 0x39, 0x67, 0xda, 0xba, 0xb7, 0xc3, 0x22,
	0x22, 0x4f, 0xa1, 0x95, 0xe5, 0x72, 0xcb, 0x95, 0x32, 0x7c, 0x6f, 0xe6, 0x4d, 0xb3, 0xcd, 0x74,
	0x65, 0x53, 0x61, 0x79, 0x47, 0x9e, 0x80, 0xc3, 0xc5, 0xc1, 0x77, 0xae, 0x43, 0x96, 0xe2, 0x10,
	0x62, 0x9e, 0x2a, 0x00, 0x8c, 0xd7, 0x9a, 0xe9, 0xbd, 0x22, 0x47, 0xe0, 0x64, 0x49, 0x64, 0x8c,
	0x9a, 0x21, 0x1e, 0xc9, 0x09, 0x34, 0x95, 0x46, 0x73, 0x5b, 0xa3, 0x0d, 0xaa, 0xde, 0xce, 0x3d,
	0xde, 0xa7, 0xe0, 0xf2, 0x6f, 0x89, 0xe6, 0x91, 0xdf, 0xb0, 0xa5, 0xdb, 0x88, 0xee, 0xec, 0x88,
	0x10, 0x72, 0xd7, 0x64, 0x47, 0xe0, 0x6d, 0xe5, 0x6e, 0xc7, 0x44, 0x74, 0x91, 0x88, 0xd2, 0xb9,
	0x9a, 0x22, 0xcf, 0x60, 0x90, 0xca, 0x38, 0xe6, 0xf9, 0xa2, 0x82, 0x73, 0x0c, 0xee, 0xf6, 0x05,
	0x3d, 0x83, 0x36, 0xda, 0x5d, 0xa2, 0xf6, 0x1d, 0x7e, 0xf4, 0x15, 0xfc, 0x57, 0x94, 0xc3, 0x55,
	0x31, 0x88, 0x09, 0xb4, 0x95, 0x39, 0x71, 0xfb, 0x74, 0xde, 0xac, 0x5f, 0x76, 0x68, 0x11, 0xe1,
	0xd5, 0xfd, 0xec, 0x47, 0x03, 0x60, 0x21, 0x85, 0xce, 0x65, 0x3a, 0x5f, 0x7d, 0x20, 0x73, 0xe8,
	0x5e, 0x98, 0x12, 0x8a, 0xdd, 0x01, 0x24, 0xda, 0xf3, 0xd0, 0x9c, 0xed, 0xfe, 0xd1, 0x47, 0xdf,
	0x7f, 0xfd, 0xfe, 0x59, 0x3f, 0xa6, 0xfd, 0xc0, 0x56, 0x1c, 0xd8, 0xfd, 0x79, 0x59, 0x9b, 0x90,
	0x37, 0xd0, 0x2b, 0x0a, 0x7a, 0x40, 0xe3, 0x7f, 0xa3, 0x31, 0xa0, 0xdd, 0x00, 0x47, 0x7e, 0x4d,
	0xa1, 0x3b, 0x4f, 0xd3, 0xab, 0xae, 0x48, 0x1b, 0x49, 0xf8, 0x01, 0x0c, 0x8f, 0x2b, 0x2f, 0x55,
	0xb6, 0x4b, 0x07, 0x46, 0xc7, 0xa3, 0xae, 0xd1, 0x51, 0xa8, 0x30, 0x85, 0xc6, 0x7b, 0x96, 0xea,
	0x0a, 0xb3, 0x6a, 0x7c, 0x64, 0x08, 0x40, 0x9b, 0xc1, 0x67, 0x96, 0x6a, 0xc4, 0xbf, 0x06, 0x98,
	0x47, 0x51, 0xf9, 0xac, 0x66, 0x1f, 0x8a, 0x0d, 0x1e, 0xde, 0x18, 0x1d, 0x3d, 0x31, 0xe4, 0x3e,
	0xed, 0xd8, 0xaa, 0x59, 0x14, 0xa1, 0xc0, 0x12, 0x7a, 0x1f, 0xb3, 0x88, 0x69, 0xfe, 0x4f, 0x1a,
	0x37, 0x3a, 0xdf, 0x1b, 0x26, 0xca, 0xbc, 0x85, 0xde, 0x39, 0x4f, 0xf9, 0x5f, 0x99, 0x6e, 0xc9,
	0xc4, 0xf7, 0xbf, 0x6f, 0x7a, 0x91, 0xa1, 0xd9, 0xe9, 0xc1, 0x3b, 0xeb, 0x7b, 0x5b, 0xe0, 0x81,
	0x66, 0x62, 0x8e, 0xd3, 0xd8, 0xb8, 0xe6, 0xaf, 0xf3, 0xfc, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd4, 0x9e, 0xa2, 0x59, 0xa7, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ControlAPIClient is the client API for ControlAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ControlAPIClient interface {
	// LoggerSignal send signal to logger.
	LoggerSignal(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*Result, error)
	// CommandSignal send signal to process.
	ProcessSignal(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*Result, error)
	// AllProcesses returns all registered processes.
	AllProcesses(ctx context.Context, in *Nope, opts ...grpc.CallOption) (*ProcessesStatus, error)
	// Halt stops supervisor.
	Halt(ctx context.Context, in *Nope, opts ...grpc.CallOption) (*Result, error)
	// AddProcess adds process.
	AddProcess(ctx context.Context, in *SetProc, opts ...grpc.CallOption) (*ProcStatus, error)
	// UpdateProcess updates process.
	UpdateProcess(ctx context.Context, in *SetProc, opts ...grpc.CallOption) (*ProcStatus, error)
	// DeleteProcess deletes process.
	DeleteProcess(ctx context.Context, in *ProcName, opts ...grpc.CallOption) (*Result, error)
	// GetProcess returns process status by name.
	GetProcess(ctx context.Context, in *ProcName, opts ...grpc.CallOption) (*ProcStatus, error)
}

type controlAPIClient struct {
	cc *grpc.ClientConn
}

func NewControlAPIClient(cc *grpc.ClientConn) ControlAPIClient {
	return &controlAPIClient{cc}
}

func (c *controlAPIClient) LoggerSignal(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.ControlAPI/LoggerSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlAPIClient) ProcessSignal(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.ControlAPI/ProcessSignal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlAPIClient) AllProcesses(ctx context.Context, in *Nope, opts ...grpc.CallOption) (*ProcessesStatus, error) {
	out := new(ProcessesStatus)
	err := c.cc.Invoke(ctx, "/pb.ControlAPI/AllProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlAPIClient) Halt(ctx context.Context, in *Nope, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.ControlAPI/Halt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlAPIClient) AddProcess(ctx context.Context, in *SetProc, opts ...grpc.CallOption) (*ProcStatus, error) {
	out := new(ProcStatus)
	err := c.cc.Invoke(ctx, "/pb.ControlAPI/AddProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlAPIClient) UpdateProcess(ctx context.Context, in *SetProc, opts ...grpc.CallOption) (*ProcStatus, error) {
	out := new(ProcStatus)
	err := c.cc.Invoke(ctx, "/pb.ControlAPI/UpdateProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlAPIClient) DeleteProcess(ctx context.Context, in *ProcName, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/pb.ControlAPI/DeleteProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlAPIClient) GetProcess(ctx context.Context, in *ProcName, opts ...grpc.CallOption) (*ProcStatus, error) {
	out := new(ProcStatus)
	err := c.cc.Invoke(ctx, "/pb.ControlAPI/GetProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlAPIServer is the server API for ControlAPI service.
type ControlAPIServer interface {
	// LoggerSignal send signal to logger.
	LoggerSignal(context.Context, *Signal) (*Result, error)
	// CommandSignal send signal to process.
	ProcessSignal(context.Context, *Signal) (*Result, error)
	// AllProcesses returns all registered processes.
	AllProcesses(context.Context, *Nope) (*ProcessesStatus, error)
	// Halt stops supervisor.
	Halt(context.Context, *Nope) (*Result, error)
	// AddProcess adds process.
	AddProcess(context.Context, *SetProc) (*ProcStatus, error)
	// UpdateProcess updates process.
	UpdateProcess(context.Context, *SetProc) (*ProcStatus, error)
	// DeleteProcess deletes process.
	DeleteProcess(context.Context, *ProcName) (*Result, error)
	// GetProcess returns process status by name.
	GetProcess(context.Context, *ProcName) (*ProcStatus, error)
}

// UnimplementedControlAPIServer can be embedded to have forward compatible implementations.
type UnimplementedControlAPIServer struct {
}

func (*UnimplementedControlAPIServer) LoggerSignal(ctx context.Context, req *Signal) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoggerSignal not implemented")
}
func (*UnimplementedControlAPIServer) ProcessSignal(ctx context.Context, req *Signal) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessSignal not implemented")
}
func (*UnimplementedControlAPIServer) AllProcesses(ctx context.Context, req *Nope) (*ProcessesStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllProcesses not implemented")
}
func (*UnimplementedControlAPIServer) Halt(ctx context.Context, req *Nope) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Halt not implemented")
}
func (*UnimplementedControlAPIServer) AddProcess(ctx context.Context, req *SetProc) (*ProcStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProcess not implemented")
}
func (*UnimplementedControlAPIServer) UpdateProcess(ctx context.Context, req *SetProc) (*ProcStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcess not implemented")
}
func (*UnimplementedControlAPIServer) DeleteProcess(ctx context.Context, req *ProcName) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProcess not implemented")
}
func (*UnimplementedControlAPIServer) GetProcess(ctx context.Context, req *ProcName) (*ProcStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcess not implemented")
}

func RegisterControlAPIServer(s *grpc.Server, srv ControlAPIServer) {
	s.RegisterService(&_ControlAPI_serviceDesc, srv)
}

func _ControlAPI_LoggerSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Signal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).LoggerSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlAPI/LoggerSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).LoggerSignal(ctx, req.(*Signal))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlAPI_ProcessSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Signal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).ProcessSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlAPI/ProcessSignal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).ProcessSignal(ctx, req.(*Signal))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlAPI_AllProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).AllProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlAPI/AllProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).AllProcesses(ctx, req.(*Nope))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlAPI_Halt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).Halt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlAPI/Halt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).Halt(ctx, req.(*Nope))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlAPI_AddProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).AddProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlAPI/AddProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).AddProcess(ctx, req.(*SetProc))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlAPI_UpdateProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).UpdateProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlAPI/UpdateProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).UpdateProcess(ctx, req.(*SetProc))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlAPI_DeleteProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).DeleteProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlAPI/DeleteProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).DeleteProcess(ctx, req.(*ProcName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlAPI_GetProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlAPIServer).GetProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ControlAPI/GetProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlAPIServer).GetProcess(ctx, req.(*ProcName))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ControlAPI",
	HandlerType: (*ControlAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoggerSignal",
			Handler:    _ControlAPI_LoggerSignal_Handler,
		},
		{
			MethodName: "ProcessSignal",
			Handler:    _ControlAPI_ProcessSignal_Handler,
		},
		{
			MethodName: "AllProcesses",
			Handler:    _ControlAPI_AllProcesses_Handler,
		},
		{
			MethodName: "Halt",
			Handler:    _ControlAPI_Halt_Handler,
		},
		{
			MethodName: "AddProcess",
			Handler:    _ControlAPI_AddProcess_Handler,
		},
		{
			MethodName: "UpdateProcess",
			Handler:    _ControlAPI_UpdateProcess_Handler,
		},
		{
			MethodName: "DeleteProcess",
			Handler:    _ControlAPI_DeleteProcess_Handler,
		},
		{
			MethodName: "GetProcess",
			Handler:    _ControlAPI_GetProcess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/api.proto",
}
